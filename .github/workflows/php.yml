name: PHP Composer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md

    # - name: Run test suite
    #   run: composer run-script test

#
# * above is default https://github.com/actions/starter-workflows/blob/main/ci/php.yml
# * below is https://github.com/marketplace/actions/phpstan-php-actions
#
    - name: PHPStan (php-actions)
      # You may pin to the exact commit or the version.
      # uses: php-actions/phpstan@7b9a9fb3d374ae61177749c96d6a9e13cb1dae8b
      uses: php-actions/phpstan@v3
      with:
        # What version of PHPStan to use
        # version: # optional, default is latest
        # What version of PHP to use
        php_version: "7.4"
        # Space separated list of extensions to configure with the PHP build
        # php_extensions: # optional
        # The command to run (analyse [default], clear-result-cache, dump-deps, help, list, worker)
        # command: # default is analyse
        # Path(s) with source code to run analysis on
        # path: 
        # Configuration file location
        configuration: "phpstan.neon"
        # Level of rule options - the higher, the stricter
        # level: # optional
        # Path to a file with a list of paths to run analysis on
        # paths_file: # optional
        # Project's additional autoload file path
        # autoload_file: # optional
        # Format in which to print the result of the analysis
         #error_format: # optional
        # Path to a file where the baseline should be saved
        # generate_baseline: # optional
        # Memory limit for analysis
        # memory_limit: # optional
        # Extra arguments to pass to the phpstan binary
        # args: # optional
